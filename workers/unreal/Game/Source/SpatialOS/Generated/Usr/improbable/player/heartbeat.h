// Generated by SpatialOS codegen. DO NOT EDIT!
// source: improbable/player/heartbeat.schema
#ifndef SPATIALOS_SCHEMA_improbable_player_heartbeat_schema_15090600756621691894_INCLUDED
#define SPATIALOS_SCHEMA_improbable_player_heartbeat_schema_15090600756621691894_INCLUDED
#include <improbable/collections.h>
#include <improbable/worker.h>
#include <cstddef>
#include <cstdint>
#include <set>
#include <string>

#ifndef IMPROBABLE_DLL_API
#define IMPROBABLE_DLL_API
#endif  // IMPROBABLE_DLL_API

namespace improbable {
namespace player {

// Forward declarations.
//----------------------------------------------------------------

class HeartbeatReceiverData;
class HeartbeatRequest;
class HeartbeatResponse;
class HeartbeatSenderData;

namespace detail {
struct IMPROBABLE_DLL_API GenericCommandObject_HeartbeatReceiver {
  std::uint32_t CommandId;
  ::worker::Variant<
      ::improbable::player::HeartbeatRequest,
      ::improbable::player::HeartbeatResponse> CommandObject;
};
struct IMPROBABLE_DLL_API GenericCommandObject_HeartbeatSender {
  std::uint32_t CommandId;
  ::worker::Variant<> CommandObject;
};
}  // ::detail

// Enumerations.
//----------------------------------------------------------------

} // ::improbable
} // ::player

namespace std {
template <>
struct IMPROBABLE_DLL_API hash< ::improbable::player::HeartbeatReceiverData > {
  size_t operator()(const ::improbable::player::HeartbeatReceiverData& value) const;
};

template <>
struct IMPROBABLE_DLL_API hash< ::improbable::player::HeartbeatRequest > {
  size_t operator()(const ::improbable::player::HeartbeatRequest& value) const;
};

template <>
struct IMPROBABLE_DLL_API hash< ::improbable::player::HeartbeatResponse > {
  size_t operator()(const ::improbable::player::HeartbeatResponse& value) const;
};

template <>
struct IMPROBABLE_DLL_API hash< ::improbable::player::HeartbeatSenderData > {
  size_t operator()(const ::improbable::player::HeartbeatSenderData& value) const;
};

} // ::std

namespace improbable {

namespace player {

// Data classes.
//----------------------------------------------------------------

class IMPROBABLE_DLL_API HeartbeatReceiverData {
public:
  // Creates a new instance with default values for each field.
  HeartbeatReceiverData();
  // Creates a new instance with default values for each field. This is
  // equivalent to a default-constructed instance.
  static HeartbeatReceiverData Create() { return {}; }

  // Copyable and moveable.
  HeartbeatReceiverData(HeartbeatReceiverData&&) = default;
  HeartbeatReceiverData(const HeartbeatReceiverData&) = default;
  HeartbeatReceiverData& operator=(HeartbeatReceiverData&&) = default;
  HeartbeatReceiverData& operator=(const HeartbeatReceiverData&) = default;
  ~HeartbeatReceiverData() = default;

  bool operator==(const HeartbeatReceiverData&) const;
  bool operator!=(const HeartbeatReceiverData&) const;
};

class IMPROBABLE_DLL_API HeartbeatRequest {
public:
  // Creates a new instance with default values for each field.
  HeartbeatRequest();
  // Creates a new instance with default values for each field. This is
  // equivalent to a default-constructed instance.
  static HeartbeatRequest Create() { return {}; }

  // Copyable and moveable.
  HeartbeatRequest(HeartbeatRequest&&) = default;
  HeartbeatRequest(const HeartbeatRequest&) = default;
  HeartbeatRequest& operator=(HeartbeatRequest&&) = default;
  HeartbeatRequest& operator=(const HeartbeatRequest&) = default;
  ~HeartbeatRequest() = default;

  bool operator==(const HeartbeatRequest&) const;
  bool operator!=(const HeartbeatRequest&) const;
};

class IMPROBABLE_DLL_API HeartbeatResponse {
public:
  // Creates a new instance with default values for each field.
  HeartbeatResponse();
  // Creates a new instance with default values for each field. This is
  // equivalent to a default-constructed instance.
  static HeartbeatResponse Create() { return {}; }

  // Copyable and moveable.
  HeartbeatResponse(HeartbeatResponse&&) = default;
  HeartbeatResponse(const HeartbeatResponse&) = default;
  HeartbeatResponse& operator=(HeartbeatResponse&&) = default;
  HeartbeatResponse& operator=(const HeartbeatResponse&) = default;
  ~HeartbeatResponse() = default;

  bool operator==(const HeartbeatResponse&) const;
  bool operator!=(const HeartbeatResponse&) const;
};

class IMPROBABLE_DLL_API HeartbeatSenderData {
public:
  // Creates a new instance with default values for each field.
  HeartbeatSenderData();
  // Creates a new instance with default values for each field. This is
  // equivalent to a default-constructed instance.
  static HeartbeatSenderData Create() { return {}; }

  // Copyable and moveable.
  HeartbeatSenderData(HeartbeatSenderData&&) = default;
  HeartbeatSenderData(const HeartbeatSenderData&) = default;
  HeartbeatSenderData& operator=(HeartbeatSenderData&&) = default;
  HeartbeatSenderData& operator=(const HeartbeatSenderData&) = default;
  ~HeartbeatSenderData() = default;

  bool operator==(const HeartbeatSenderData&) const;
  bool operator!=(const HeartbeatSenderData&) const;
};

// Component metaclasses and update classes.
//----------------------------------------------------------------

/**
 * This type can be supplied as the template parameter to all component-related templated types
 * and methods in the C++ worker API. For example:
 *
 *   using ::improbable::player::HeartbeatReceiver;
 *
 *   HeartbeatReceiver::Update update;
 *   connection.SendComponentUpdate< HeartbeatReceiver >(entity_id, update);
 *
 *   dispatcher.OnComponentUpdate< HeartbeatReceiver >(
 *       [&](const worker::ComponentUpdateOp< HeartbeatReceiver >& op) {
 *         worker::EntityId entity_id = op.GetEntityId();
 *         HeartbeatReceiver::Update update = op.GetUpdate();
 *       });
 *
 *   HeartbeatReceiver::Data data = entity.Get< HeartbeatReceiver >();
 */
struct IMPROBABLE_DLL_API HeartbeatReceiver : ::worker::detail::ComponentMetaclass {
  static constexpr const ::worker::ComponentId ComponentId = 21001;
  static const ::worker::detail::internal::WorkerProtocol_ComponentVtable& Vtable();
  using Data = ::improbable::player::HeartbeatReceiverData;
  using GenericCommandObject = ::improbable::player::detail::GenericCommandObject_HeartbeatReceiver;

  class IMPROBABLE_DLL_API Update {
  public:
    // Default-constructible, copyable and movable.
    Update() = default;
    Update(Update&&) = default;
    Update(const Update&) = default;
    Update& operator=(Update&&) = default;
    Update& operator=(const Update&) = default;
    ~Update() = default;

    bool operator==(const Update&) const;
    bool operator!=(const Update&) const;

    /** Creates an Update from a ::improbable::player::HeartbeatReceiverData object. */
    static Update FromInitialData(const ::improbable::player::HeartbeatReceiverData& data);

    /**
     * Converts to a ::improbable::player::HeartbeatReceiverData
     * object. It is an error to call this function unless *all* of the optional fields in this
     * update are filled in.
     */
    ::improbable::player::HeartbeatReceiverData ToInitialData() const;

    /**
     * Replaces fields in the given ::improbable::player::HeartbeatReceiverData
     * object with the corresponding fields in this update, where present.
     */
    void ApplyTo(::improbable::player::HeartbeatReceiverData&) const;
  };

  /**
   * Command metaclasses for the HeartbeatReceiver component.
   * Each metaclass can be supplied as the template parameter to all command-related templated
   * types and methods in the C++ worker API.
  */
  class IMPROBABLE_DLL_API Commands {
  public:
    class Heartbeat {
    public:
      static constexpr const std::uint32_t CommandId = 1;
      using ComponentMetaclass = ::improbable::player::HeartbeatReceiver;
      using Request = ::improbable::player::HeartbeatRequest;
      using Response = ::improbable::player::HeartbeatResponse;
    };
  };
};

/**
 * This type can be supplied as the template parameter to all component-related templated types
 * and methods in the C++ worker API. For example:
 *
 *   using ::improbable::player::HeartbeatSender;
 *
 *   HeartbeatSender::Update update;
 *   connection.SendComponentUpdate< HeartbeatSender >(entity_id, update);
 *
 *   dispatcher.OnComponentUpdate< HeartbeatSender >(
 *       [&](const worker::ComponentUpdateOp< HeartbeatSender >& op) {
 *         worker::EntityId entity_id = op.GetEntityId();
 *         HeartbeatSender::Update update = op.GetUpdate();
 *       });
 *
 *   HeartbeatSender::Data data = entity.Get< HeartbeatSender >();
 */
struct IMPROBABLE_DLL_API HeartbeatSender : ::worker::detail::ComponentMetaclass {
  static constexpr const ::worker::ComponentId ComponentId = 21002;
  static const ::worker::detail::internal::WorkerProtocol_ComponentVtable& Vtable();
  using Data = ::improbable::player::HeartbeatSenderData;
  using GenericCommandObject = ::improbable::player::detail::GenericCommandObject_HeartbeatSender;

  class IMPROBABLE_DLL_API Update {
  public:
    // Default-constructible, copyable and movable.
    Update() = default;
    Update(Update&&) = default;
    Update(const Update&) = default;
    Update& operator=(Update&&) = default;
    Update& operator=(const Update&) = default;
    ~Update() = default;

    bool operator==(const Update&) const;
    bool operator!=(const Update&) const;

    /** Creates an Update from a ::improbable::player::HeartbeatSenderData object. */
    static Update FromInitialData(const ::improbable::player::HeartbeatSenderData& data);

    /**
     * Converts to a ::improbable::player::HeartbeatSenderData
     * object. It is an error to call this function unless *all* of the optional fields in this
     * update are filled in.
     */
    ::improbable::player::HeartbeatSenderData ToInitialData() const;

    /**
     * Replaces fields in the given ::improbable::player::HeartbeatSenderData
     * object with the corresponding fields in this update, where present.
     */
    void ApplyTo(::improbable::player::HeartbeatSenderData&) const;
  };

};

// Implementation details.
//----------------------------------------------------------------

namespace detail {

void Write_HeartbeatReceiverData(const ::improbable::player::HeartbeatReceiverData&, ::worker::detail::internal::Pbio_Object*);

::improbable::player::HeartbeatReceiverData Read_HeartbeatReceiverData(::worker::detail::internal::Pbio_Object*);

void Write_HeartbeatRequest(const ::improbable::player::HeartbeatRequest&, ::worker::detail::internal::Pbio_Object*);

::improbable::player::HeartbeatRequest Read_HeartbeatRequest(::worker::detail::internal::Pbio_Object*);

void Write_HeartbeatResponse(const ::improbable::player::HeartbeatResponse&, ::worker::detail::internal::Pbio_Object*);

::improbable::player::HeartbeatResponse Read_HeartbeatResponse(::worker::detail::internal::Pbio_Object*);

void Write_HeartbeatSenderData(const ::improbable::player::HeartbeatSenderData&, ::worker::detail::internal::Pbio_Object*);

::improbable::player::HeartbeatSenderData Read_HeartbeatSenderData(::worker::detail::internal::Pbio_Object*);

}  // ::detail
}  // ::player
}  // ::improbable

#endif  // SPATIALOS_SCHEMA_improbable_player_heartbeat_schema_15090600756621691894_INCLUDED
