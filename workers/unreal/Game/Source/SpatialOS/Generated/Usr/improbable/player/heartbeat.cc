// Generated by SpatialOS codegen. DO NOT EDIT!
// source: improbable/player/heartbeat.schema
#include "improbable/player/heartbeat.h"

namespace improbable {
namespace player {

// Serialization helpers.
//----------------------------------------------------------------

namespace detail {

void Write_HeartbeatReceiverData(const ::improbable::player::HeartbeatReceiverData&, ::worker::detail::internal::Pbio_Object*) {}

::improbable::player::HeartbeatReceiverData Read_HeartbeatReceiverData(::worker::detail::internal::Pbio_Object*) {
  return {};
}

void Write_HeartbeatRequest(const ::improbable::player::HeartbeatRequest&, ::worker::detail::internal::Pbio_Object*) {}

::improbable::player::HeartbeatRequest Read_HeartbeatRequest(::worker::detail::internal::Pbio_Object*) {
  return {};
}

void Write_HeartbeatResponse(const ::improbable::player::HeartbeatResponse&, ::worker::detail::internal::Pbio_Object*) {}

::improbable::player::HeartbeatResponse Read_HeartbeatResponse(::worker::detail::internal::Pbio_Object*) {
  return {};
}

void Write_HeartbeatSenderData(const ::improbable::player::HeartbeatSenderData&, ::worker::detail::internal::Pbio_Object*) {}

::improbable::player::HeartbeatSenderData Read_HeartbeatSenderData(::worker::detail::internal::Pbio_Object*) {
  return {};
}

namespace {

void VtableFree_HeartbeatReceiver(
    ::worker::ComponentId, std::uint8_t handle_type,
    void* internal_handle) {
  auto* handle = reinterpret_cast< ::worker::detail::ClientHandleBase* >(internal_handle);
  if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_UPDATE) {
    ::worker::detail::ClientHandle< ::improbable::player::HeartbeatReceiver::Update >::free(handle);
  } else if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_SNAPSHOT) {
    ::worker::detail::ClientHandle< ::improbable::player::HeartbeatReceiverData >::free(handle);
  } else if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_REQUEST ||
             handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_RESPONSE) {
    ::worker::detail::ClientHandle< GenericCommandObject_HeartbeatReceiver >::free(handle);
  }
}

void* VtableCopy_HeartbeatReceiver(
    ::worker::ComponentId, std::uint8_t handle_type, const void* internal_handle) {
  auto* handle = reinterpret_cast< ::worker::detail::ClientHandleBase* >(const_cast<void*>(internal_handle));
  if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_UPDATE) {
    return ::worker::detail::ClientHandle< ::improbable::player::HeartbeatReceiver::Update >::new_copy(handle);
  } else if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_SNAPSHOT) {
    return ::worker::detail::ClientHandle< ::improbable::player::HeartbeatReceiverData >::new_copy(handle);
  } else if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_REQUEST ||
             handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_RESPONSE) {
    return ::worker::detail::ClientHandle<
        GenericCommandObject_HeartbeatReceiver >::new_copy(handle);
  }
  return nullptr;
}

std::uint8_t VtableDeserialize_HeartbeatReceiver(
    ::worker::ComponentId, std::uint8_t handle_type,
    ::worker::detail::internal::Pbio_Object* root, void** internal_handle_out) {
  auto** handle_out = reinterpret_cast< ::worker::detail::ClientHandleBase** >(internal_handle_out);
  *handle_out = nullptr;
  if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_UPDATE) {
    *handle_out = ::worker::detail::ClientHandle< ::improbable::player::HeartbeatReceiver::Update >::allocate();
    {
    }
    {
    }
  } else if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_SNAPSHOT) {
    *handle_out = ::worker::detail::ClientHandle< ::improbable::player::HeartbeatReceiverData >::allocate(::improbable::player::detail::Read_HeartbeatReceiverData(::worker::detail::internal::Pbio_GetObject(root, 21001)));
  } else if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_REQUEST) {
    auto command_object = ::worker::detail::internal::Pbio_GetObject(root, 21001);
    if (::worker::detail::internal::Pbio_GetObjectCount(command_object, 1)) {
      *handle_out = ::worker::detail::ClientHandle< ::improbable::player::detail::GenericCommandObject_HeartbeatReceiver >::allocate(
        ::improbable::player::HeartbeatReceiver::Commands::Heartbeat::CommandId,
        ::improbable::player::detail::Read_HeartbeatRequest(::worker::detail::internal::Pbio_GetObject(command_object, 1)));
    }
  } else if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_RESPONSE) {
    auto command_object = ::worker::detail::internal::Pbio_GetObject(root, 21001);
    if (::worker::detail::internal::Pbio_GetObjectCount(command_object, 2)) {
      *handle_out = ::worker::detail::ClientHandle< ::improbable::player::detail::GenericCommandObject_HeartbeatReceiver >::allocate(
        ::improbable::player::HeartbeatReceiver::Commands::Heartbeat::CommandId,
        ::improbable::player::detail::Read_HeartbeatResponse(::worker::detail::internal::Pbio_GetObject(command_object, 2)));
    }
  }
  return true;
}

void VtableSerialize_HeartbeatReceiver(
    ::worker::ComponentId, std::uint8_t handle_type,
    const void* internal_handle, ::worker::detail::internal::Pbio_Object* root) {
  const auto* handle = reinterpret_cast< const ::worker::detail::ClientHandleBase* >(internal_handle);
  static_cast<void>(handle);
  if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_UPDATE) {
    {
      ::worker::detail::internal::Pbio_AddObject(
          ::worker::detail::internal::Pbio_AddObject(root, /* entity_state */ 2), 21001);
    }
    {
    }
  } else if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_SNAPSHOT) {
    ::improbable::player::detail::Write_HeartbeatReceiverData(
        ::worker::detail::ClientHandle< ::improbable::player::HeartbeatReceiverData >::get(handle),
        ::worker::detail::internal::Pbio_AddObject(root, 21001));
  } else if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_REQUEST) {
    const auto& data = ::worker::detail::ClientHandle< GenericCommandObject_HeartbeatReceiver >::get(handle);
    auto command_object = ::worker::detail::internal::Pbio_AddObject(root, 21001);
    if (data.CommandId == ::improbable::player::HeartbeatReceiver::Commands::Heartbeat::CommandId) {
      ::improbable::player::detail::Write_HeartbeatRequest(*data.CommandObject.data< ::improbable::player::HeartbeatRequest >(), ::worker::detail::internal::Pbio_AddObject(command_object, 1));
    }
  } else if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_RESPONSE) {
    const auto& data = ::worker::detail::ClientHandle< GenericCommandObject_HeartbeatReceiver >::get(handle);
    auto command_object = ::worker::detail::internal::Pbio_AddObject(root, 21001);
    if (data.CommandId == ::improbable::player::HeartbeatReceiver::Commands::Heartbeat::CommandId) {
      ::improbable::player::detail::Write_HeartbeatResponse(*data.CommandObject.data< ::improbable::player::HeartbeatResponse >(), ::worker::detail::internal::Pbio_AddObject(command_object, 2));
    }
  }
}

}  // anonymous namespace

namespace {

void VtableFree_HeartbeatSender(
    ::worker::ComponentId, std::uint8_t handle_type,
    void* internal_handle) {
  auto* handle = reinterpret_cast< ::worker::detail::ClientHandleBase* >(internal_handle);
  if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_UPDATE) {
    ::worker::detail::ClientHandle< ::improbable::player::HeartbeatSender::Update >::free(handle);
  } else if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_SNAPSHOT) {
    ::worker::detail::ClientHandle< ::improbable::player::HeartbeatSenderData >::free(handle);
  } else if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_REQUEST ||
             handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_RESPONSE) {
    ::worker::detail::ClientHandle< GenericCommandObject_HeartbeatSender >::free(handle);
  }
}

void* VtableCopy_HeartbeatSender(
    ::worker::ComponentId, std::uint8_t handle_type, const void* internal_handle) {
  auto* handle = reinterpret_cast< ::worker::detail::ClientHandleBase* >(const_cast<void*>(internal_handle));
  if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_UPDATE) {
    return ::worker::detail::ClientHandle< ::improbable::player::HeartbeatSender::Update >::new_copy(handle);
  } else if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_SNAPSHOT) {
    return ::worker::detail::ClientHandle< ::improbable::player::HeartbeatSenderData >::new_copy(handle);
  } else if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_REQUEST ||
             handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_RESPONSE) {
    return ::worker::detail::ClientHandle<
        GenericCommandObject_HeartbeatSender >::new_copy(handle);
  }
  return nullptr;
}

std::uint8_t VtableDeserialize_HeartbeatSender(
    ::worker::ComponentId, std::uint8_t handle_type,
    ::worker::detail::internal::Pbio_Object* root, void** internal_handle_out) {
  auto** handle_out = reinterpret_cast< ::worker::detail::ClientHandleBase** >(internal_handle_out);
  *handle_out = nullptr;
  if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_UPDATE) {
    *handle_out = ::worker::detail::ClientHandle< ::improbable::player::HeartbeatSender::Update >::allocate();
    {
    }
    {
    }
  } else if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_SNAPSHOT) {
    *handle_out = ::worker::detail::ClientHandle< ::improbable::player::HeartbeatSenderData >::allocate(::improbable::player::detail::Read_HeartbeatSenderData(::worker::detail::internal::Pbio_GetObject(root, 21002)));
  } else if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_REQUEST) {
  } else if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_RESPONSE) {
  }
  return true;
}

void VtableSerialize_HeartbeatSender(
    ::worker::ComponentId, std::uint8_t handle_type,
    const void* internal_handle, ::worker::detail::internal::Pbio_Object* root) {
  const auto* handle = reinterpret_cast< const ::worker::detail::ClientHandleBase* >(internal_handle);
  static_cast<void>(handle);
  if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_UPDATE) {
    {
      ::worker::detail::internal::Pbio_AddObject(
          ::worker::detail::internal::Pbio_AddObject(root, /* entity_state */ 2), 21002);
    }
    {
    }
  } else if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_SNAPSHOT) {
    ::improbable::player::detail::Write_HeartbeatSenderData(
        ::worker::detail::ClientHandle< ::improbable::player::HeartbeatSenderData >::get(handle),
        ::worker::detail::internal::Pbio_AddObject(root, 21002));
  } else if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_REQUEST) {
    ::worker::detail::internal::Pbio_AddObject(root, 21002);
  } else if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_RESPONSE) {
    ::worker::detail::internal::Pbio_AddObject(root, 21002);
  }
}

}  // anonymous namespace

}  // ::detail

// Implementation of HeartbeatReceiverData.
//----------------------------------------------------------------

HeartbeatReceiverData::HeartbeatReceiverData() {}

bool HeartbeatReceiverData::operator==(const HeartbeatReceiverData&) const {
  return true;
}

bool HeartbeatReceiverData::operator!=(const HeartbeatReceiverData& value) const {
  return !operator==(value);
}

// Implementation of HeartbeatRequest.
//----------------------------------------------------------------

HeartbeatRequest::HeartbeatRequest() {}

bool HeartbeatRequest::operator==(const HeartbeatRequest&) const {
  return true;
}

bool HeartbeatRequest::operator!=(const HeartbeatRequest& value) const {
  return !operator==(value);
}

// Implementation of HeartbeatResponse.
//----------------------------------------------------------------

HeartbeatResponse::HeartbeatResponse() {}

bool HeartbeatResponse::operator==(const HeartbeatResponse&) const {
  return true;
}

bool HeartbeatResponse::operator!=(const HeartbeatResponse& value) const {
  return !operator==(value);
}

// Implementation of HeartbeatSenderData.
//----------------------------------------------------------------

HeartbeatSenderData::HeartbeatSenderData() {}

bool HeartbeatSenderData::operator==(const HeartbeatSenderData&) const {
  return true;
}

bool HeartbeatSenderData::operator!=(const HeartbeatSenderData& value) const {
  return !operator==(value);
}

// Implementation of HeartbeatReceiver.
//----------------------------------------------------------------

constexpr const ::worker::ComponentId HeartbeatReceiver::ComponentId;

const ::worker::detail::internal::WorkerProtocol_ComponentVtable&
HeartbeatReceiver::Vtable() {
  static const ::worker::detail::internal::WorkerProtocol_ComponentVtable vtable = {
      21001,
      &::improbable::player::detail::VtableFree_HeartbeatReceiver,
      &::improbable::player::detail::VtableCopy_HeartbeatReceiver,
      &::improbable::player::detail::VtableDeserialize_HeartbeatReceiver,
      &::improbable::player::detail::VtableSerialize_HeartbeatReceiver,
  };
  return vtable;
}

constexpr const std::uint32_t HeartbeatReceiver::Commands::Heartbeat::CommandId;

bool HeartbeatReceiver::Update::operator==(const HeartbeatReceiver::Update&) const {
  return true;
}

bool HeartbeatReceiver::Update::operator!=(const HeartbeatReceiver::Update& value) const {
  return !operator==(value);
}

HeartbeatReceiver::Update HeartbeatReceiver::Update::FromInitialData(const ::improbable::player::HeartbeatReceiverData&) {
  return HeartbeatReceiver::Update{};
}

::improbable::player::HeartbeatReceiverData HeartbeatReceiver::Update::ToInitialData() const {
  return ::improbable::player::HeartbeatReceiverData();
}

void HeartbeatReceiver::Update::ApplyTo(::improbable::player::HeartbeatReceiverData&) const {
}

// Implementation of HeartbeatSender.
//----------------------------------------------------------------

constexpr const ::worker::ComponentId HeartbeatSender::ComponentId;

const ::worker::detail::internal::WorkerProtocol_ComponentVtable&
HeartbeatSender::Vtable() {
  static const ::worker::detail::internal::WorkerProtocol_ComponentVtable vtable = {
      21002,
      &::improbable::player::detail::VtableFree_HeartbeatSender,
      &::improbable::player::detail::VtableCopy_HeartbeatSender,
      &::improbable::player::detail::VtableDeserialize_HeartbeatSender,
      &::improbable::player::detail::VtableSerialize_HeartbeatSender,
  };
  return vtable;
}

bool HeartbeatSender::Update::operator==(const HeartbeatSender::Update&) const {
  return true;
}

bool HeartbeatSender::Update::operator!=(const HeartbeatSender::Update& value) const {
  return !operator==(value);
}

HeartbeatSender::Update HeartbeatSender::Update::FromInitialData(const ::improbable::player::HeartbeatSenderData&) {
  return HeartbeatSender::Update{};
}

::improbable::player::HeartbeatSenderData HeartbeatSender::Update::ToInitialData() const {
  return ::improbable::player::HeartbeatSenderData();
}

void HeartbeatSender::Update::ApplyTo(::improbable::player::HeartbeatSenderData&) const {
}

}  // ::player
}  // ::improbable

std::size_t std::hash< ::improbable::player::HeartbeatReceiverData >::operator()(const ::improbable::player::HeartbeatReceiverData& ) const {
  size_t result = 1327;
  return result;
}

std::size_t std::hash< ::improbable::player::HeartbeatRequest >::operator()(const ::improbable::player::HeartbeatRequest& ) const {
  size_t result = 1327;
  return result;
}

std::size_t std::hash< ::improbable::player::HeartbeatResponse >::operator()(const ::improbable::player::HeartbeatResponse& ) const {
  size_t result = 1327;
  return result;
}

std::size_t std::hash< ::improbable::player::HeartbeatSenderData >::operator()(const ::improbable::player::HeartbeatSenderData& ) const {
  size_t result = 1327;
  return result;
}
