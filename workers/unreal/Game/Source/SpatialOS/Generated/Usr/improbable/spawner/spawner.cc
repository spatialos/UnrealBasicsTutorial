// Generated by SpatialOS codegen. DO NOT EDIT!
// source: improbable/spawner/spawner.schema
#include "improbable/spawner/spawner.h"

namespace improbable {
namespace spawner {

// Serialization helpers.
//----------------------------------------------------------------

namespace detail {

void Write_SpawnPlayerRequest(
    const ::improbable::spawner::SpawnPlayerRequest& data, ::worker::detail::internal::Pbio_Object* object) {
  ::improbable::detail::Write_Coordinates(data.position(), ::worker::detail::internal::Pbio_AddObject(object, 1));
}

::improbable::spawner::SpawnPlayerRequest Read_SpawnPlayerRequest(::worker::detail::internal::Pbio_Object* object) {
  auto _position = ::improbable::detail::Read_Coordinates(::worker::detail::internal::Pbio_GetObject(object, 1));
  return {
      std::move(_position)};
}

void Write_SpawnPlayerResponse(
    const ::improbable::spawner::SpawnPlayerResponse& data, ::worker::detail::internal::Pbio_Object* object) {
  ::worker::detail::internal::Pbio_AddBool(object, 1, static_cast<std::uint8_t>(data.success()));
  ::worker::detail::internal::Pbio_AddBytes(object, 2, reinterpret_cast<const std::uint8_t*>(data.error_message().data()), static_cast<std::uint32_t>(data.error_message().size()));
  ::worker::detail::internal::Pbio_AddInt64(object, 3, data.created_entity_id());
}

::improbable::spawner::SpawnPlayerResponse Read_SpawnPlayerResponse(::worker::detail::internal::Pbio_Object* object) {
  auto _success = ::worker::detail::internal::Pbio_GetBool(object, 1) != 0;
  auto _error_message = [object] { auto _buffer = reinterpret_cast<const char*>(::worker::detail::internal::Pbio_GetBytes(object, 2)); return std::string{_buffer, _buffer + ::worker::detail::internal::Pbio_GetBytesLength(object, 2)}; }();
  auto _created_entity_id = ::worker::detail::internal::Pbio_GetInt64(object, 3);
  return {
      std::move(_success),
      std::move(_error_message),
      std::move(_created_entity_id)};
}

void Write_SpawnerData(const ::improbable::spawner::SpawnerData&, ::worker::detail::internal::Pbio_Object*) {}

::improbable::spawner::SpawnerData Read_SpawnerData(::worker::detail::internal::Pbio_Object*) {
  return {};
}

namespace {

void VtableFree_Spawner(
    ::worker::ComponentId, std::uint8_t handle_type,
    void* internal_handle) {
  auto* handle = reinterpret_cast< ::worker::detail::ClientHandleBase* >(internal_handle);
  if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_UPDATE) {
    ::worker::detail::ClientHandle< ::improbable::spawner::Spawner::Update >::free(handle);
  } else if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_SNAPSHOT) {
    ::worker::detail::ClientHandle< ::improbable::spawner::SpawnerData >::free(handle);
  } else if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_REQUEST ||
             handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_RESPONSE) {
    ::worker::detail::ClientHandle< GenericCommandObject_Spawner >::free(handle);
  }
}

void* VtableCopy_Spawner(
    ::worker::ComponentId, std::uint8_t handle_type, const void* internal_handle) {
  auto* handle = reinterpret_cast< ::worker::detail::ClientHandleBase* >(const_cast<void*>(internal_handle));
  if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_UPDATE) {
    return ::worker::detail::ClientHandle< ::improbable::spawner::Spawner::Update >::new_copy(handle);
  } else if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_SNAPSHOT) {
    return ::worker::detail::ClientHandle< ::improbable::spawner::SpawnerData >::new_copy(handle);
  } else if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_REQUEST ||
             handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_RESPONSE) {
    return ::worker::detail::ClientHandle<
        GenericCommandObject_Spawner >::new_copy(handle);
  }
  return nullptr;
}

std::uint8_t VtableDeserialize_Spawner(
    ::worker::ComponentId, std::uint8_t handle_type,
    ::worker::detail::internal::Pbio_Object* root, void** internal_handle_out) {
  auto** handle_out = reinterpret_cast< ::worker::detail::ClientHandleBase** >(internal_handle_out);
  *handle_out = nullptr;
  if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_UPDATE) {
    *handle_out = ::worker::detail::ClientHandle< ::improbable::spawner::Spawner::Update >::allocate();
    {
    }
    {
    }
  } else if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_SNAPSHOT) {
    *handle_out = ::worker::detail::ClientHandle< ::improbable::spawner::SpawnerData >::allocate(::improbable::spawner::detail::Read_SpawnerData(::worker::detail::internal::Pbio_GetObject(root, 21010)));
  } else if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_REQUEST) {
    auto command_object = ::worker::detail::internal::Pbio_GetObject(root, 21010);
    if (::worker::detail::internal::Pbio_GetObjectCount(command_object, 1)) {
      *handle_out = ::worker::detail::ClientHandle< ::improbable::spawner::detail::GenericCommandObject_Spawner >::allocate(
        ::improbable::spawner::Spawner::Commands::SpawnPlayer::CommandId,
        ::improbable::spawner::detail::Read_SpawnPlayerRequest(::worker::detail::internal::Pbio_GetObject(command_object, 1)));
    }
  } else if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_RESPONSE) {
    auto command_object = ::worker::detail::internal::Pbio_GetObject(root, 21010);
    if (::worker::detail::internal::Pbio_GetObjectCount(command_object, 2)) {
      *handle_out = ::worker::detail::ClientHandle< ::improbable::spawner::detail::GenericCommandObject_Spawner >::allocate(
        ::improbable::spawner::Spawner::Commands::SpawnPlayer::CommandId,
        ::improbable::spawner::detail::Read_SpawnPlayerResponse(::worker::detail::internal::Pbio_GetObject(command_object, 2)));
    }
  }
  return true;
}

void VtableSerialize_Spawner(
    ::worker::ComponentId, std::uint8_t handle_type,
    const void* internal_handle, ::worker::detail::internal::Pbio_Object* root) {
  const auto* handle = reinterpret_cast< const ::worker::detail::ClientHandleBase* >(internal_handle);
  static_cast<void>(handle);
  if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_UPDATE) {
    {
      ::worker::detail::internal::Pbio_AddObject(
          ::worker::detail::internal::Pbio_AddObject(root, /* entity_state */ 2), 21010);
    }
    {
    }
  } else if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_SNAPSHOT) {
    ::improbable::spawner::detail::Write_SpawnerData(
        ::worker::detail::ClientHandle< ::improbable::spawner::SpawnerData >::get(handle),
        ::worker::detail::internal::Pbio_AddObject(root, 21010));
  } else if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_REQUEST) {
    const auto& data = ::worker::detail::ClientHandle< GenericCommandObject_Spawner >::get(handle);
    auto command_object = ::worker::detail::internal::Pbio_AddObject(root, 21010);
    if (data.CommandId == ::improbable::spawner::Spawner::Commands::SpawnPlayer::CommandId) {
      ::improbable::spawner::detail::Write_SpawnPlayerRequest(*data.CommandObject.data< ::improbable::spawner::SpawnPlayerRequest >(), ::worker::detail::internal::Pbio_AddObject(command_object, 1));
    }
  } else if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_RESPONSE) {
    const auto& data = ::worker::detail::ClientHandle< GenericCommandObject_Spawner >::get(handle);
    auto command_object = ::worker::detail::internal::Pbio_AddObject(root, 21010);
    if (data.CommandId == ::improbable::spawner::Spawner::Commands::SpawnPlayer::CommandId) {
      ::improbable::spawner::detail::Write_SpawnPlayerResponse(*data.CommandObject.data< ::improbable::spawner::SpawnPlayerResponse >(), ::worker::detail::internal::Pbio_AddObject(command_object, 2));
    }
  }
}

}  // anonymous namespace

}  // ::detail

// Implementation of SpawnPlayerRequest.
//----------------------------------------------------------------

SpawnPlayerRequest::SpawnPlayerRequest(const ::improbable::Coordinates& position)
: _position{position} {}

SpawnPlayerRequest::SpawnPlayerRequest() {}

bool SpawnPlayerRequest::operator==(const SpawnPlayerRequest& value) const {
  return
      _position == value._position;
}

bool SpawnPlayerRequest::operator!=(const SpawnPlayerRequest& value) const {
  return !operator==(value);
}

const ::improbable::Coordinates& SpawnPlayerRequest::position() const {
  return _position;
}

::improbable::Coordinates& SpawnPlayerRequest::position() {
  return _position;
}

SpawnPlayerRequest& SpawnPlayerRequest::set_position(const ::improbable::Coordinates& value) {
  _position = value;
  return *this;
}

// Implementation of SpawnPlayerResponse.
//----------------------------------------------------------------

SpawnPlayerResponse::SpawnPlayerResponse(
    bool success,
    const std::string& error_message,
    ::worker::EntityId created_entity_id)
: _success{success}
, _error_message{error_message}
, _created_entity_id{created_entity_id} {}

SpawnPlayerResponse::SpawnPlayerResponse()
: _success{0}
, _created_entity_id{0} {}

bool SpawnPlayerResponse::operator==(const SpawnPlayerResponse& value) const {
  return
      _success == value._success &&
      _error_message == value._error_message &&
      _created_entity_id == value._created_entity_id;
}

bool SpawnPlayerResponse::operator!=(const SpawnPlayerResponse& value) const {
  return !operator==(value);
}

bool SpawnPlayerResponse::success() const {
  return _success;
}

bool& SpawnPlayerResponse::success() {
  return _success;
}

SpawnPlayerResponse& SpawnPlayerResponse::set_success(bool value) {
  _success = value;
  return *this;
}

const std::string& SpawnPlayerResponse::error_message() const {
  return _error_message;
}

std::string& SpawnPlayerResponse::error_message() {
  return _error_message;
}

SpawnPlayerResponse& SpawnPlayerResponse::set_error_message(const std::string& value) {
  _error_message = value;
  return *this;
}

::worker::EntityId SpawnPlayerResponse::created_entity_id() const {
  return _created_entity_id;
}

::worker::EntityId& SpawnPlayerResponse::created_entity_id() {
  return _created_entity_id;
}

SpawnPlayerResponse& SpawnPlayerResponse::set_created_entity_id(::worker::EntityId value) {
  _created_entity_id = value;
  return *this;
}

// Implementation of SpawnerData.
//----------------------------------------------------------------

SpawnerData::SpawnerData() {}

bool SpawnerData::operator==(const SpawnerData&) const {
  return true;
}

bool SpawnerData::operator!=(const SpawnerData& value) const {
  return !operator==(value);
}

// Implementation of Spawner.
//----------------------------------------------------------------

constexpr const ::worker::ComponentId Spawner::ComponentId;

const ::worker::detail::internal::WorkerProtocol_ComponentVtable&
Spawner::Vtable() {
  static const ::worker::detail::internal::WorkerProtocol_ComponentVtable vtable = {
      21010,
      &::improbable::spawner::detail::VtableFree_Spawner,
      &::improbable::spawner::detail::VtableCopy_Spawner,
      &::improbable::spawner::detail::VtableDeserialize_Spawner,
      &::improbable::spawner::detail::VtableSerialize_Spawner,
  };
  return vtable;
}

constexpr const std::uint32_t Spawner::Commands::SpawnPlayer::CommandId;

bool Spawner::Update::operator==(const Spawner::Update&) const {
  return true;
}

bool Spawner::Update::operator!=(const Spawner::Update& value) const {
  return !operator==(value);
}

Spawner::Update Spawner::Update::FromInitialData(const ::improbable::spawner::SpawnerData&) {
  return Spawner::Update{};
}

::improbable::spawner::SpawnerData Spawner::Update::ToInitialData() const {
  return ::improbable::spawner::SpawnerData();
}

void Spawner::Update::ApplyTo(::improbable::spawner::SpawnerData&) const {
}

}  // ::spawner
}  // ::improbable

std::size_t std::hash< ::improbable::spawner::SpawnPlayerRequest >::operator()(const ::improbable::spawner::SpawnPlayerRequest& value) const {
  size_t result = 1327;
  result = (result * 977) + std::hash< ::improbable::Coordinates >{}(value.position());
  return result;
}

std::size_t std::hash< ::improbable::spawner::SpawnPlayerResponse >::operator()(const ::improbable::spawner::SpawnPlayerResponse& value) const {
  size_t result = 1327;
  result = (result * 977) + std::hash< bool >{}(value.success());
  result = (result * 977) + std::hash< std::string >{}(value.error_message());
  result = (result * 977) + std::hash< ::worker::EntityId >{}(value.created_entity_id());
  return result;
}

std::size_t std::hash< ::improbable::spawner::SpawnerData >::operator()(const ::improbable::spawner::SpawnerData& ) const {
  size_t result = 1327;
  return result;
}
